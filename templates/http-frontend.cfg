frontend {{ .FrontendName }}
	{{ if .OffloadSSL }}
	bind {{ .Address }}:{{ .Port }} {{ if .AcceptProxy }}accept-proxy{{ end }} ssl no-sslv3 no-tlsv10 no-tls-tickets crt /etc/ssl/private/haproxy/tls/ {{ if .TLSAuth }} ca-file /etc/ssl/private/haproxy/ca/{{ .TLSAuth.CAFile }} {{ if .TLSAuth.CRLFile }} crl-file /etc/ssl/private/haproxy/ca/{{ .TLSAuth.CRLFile }}{{ end }} verify {{ .TLSAuth.VerifyClient }} {{ if .TLSAuth.ErrorPage }}crt-ignore-err all {{end}}{{ end }} {{ if .ALPNOptions }}{{ .ALPNOptions }}{{ end }}
	# Mark all cookies as secure
	rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure
	{{ if .EnableHSTS }}
	# Add the HSTS header with a 6 month default max-age
	http-response set-header Strict-Transport-Security max-age={{ .HSTSMaxAge }}{{ if .HSTSPreload }};\ preload{{ end }}{{ if .HSTSIncludeSubDomains }};\ includeSubDomains{{ end }}
	{{ end }}
	{{ else }}
	bind {{ .Address }}:{{ .Port }} {{ if .AcceptProxy }}accept-proxy{{ end }}
	{{ end }}

	mode http

	{{ if .Limit }}
	{{ if .Limit.Connection }}
	stick-table type ip size 100k expire 2m store conn_cur
	acl __mark_as_overload_conn__ sc1_conn_cur gt {{ .Limit.Connection }}
	tcp-request content track-sc1 src
	http-request deny if __mark_as_overload_conn__
	{{ end }}
	{{ if .Limit.Rate }}
	tcp-request inspect-delay 5s
	stick-table type ip size 1m expire 5m store conn_rate({{ .Limit.TimeSecond }}s)
	acl __mark_as_overload__ sc1_conn_rate gt {{ .Limit.Rate }}
	tcp-request content track-sc1 src
	http-request deny if __mark_as_overload__
	{{ end }}
	{{ end }}

	{{ if .WhitelistSourceRange }}
	# Add whitelisted ips
	acl network_allowed src {{ .WhitelistSourceRange }}
	block if !network_allowed
	{{ end }}

	{{ if .BasicAuth }}
	{{ range $name := .BasicAuth.UserLists }}
	acl __auth_ok__  http_auth({{ $name }})
	{{ end }}
	http-request auth {{ if not $.BasicAuth.Realm }}realm "{{ $.BasicAuth.Realm }}" {{ end }}if !__auth_ok__
	{{ end }}

	{{ if .TLSAuth }}
	{{ if .TLSAuth.ErrorPage }}
	redirect location {{ .TLSAuth.ErrorPage }} unless { ssl_c_verify 0 } {{ if .TLSAuth.ErrorPath }}! { path {{ .TLSAuth.ErrorPath }} } {{ end }}
	{{ end }}
	{{ range $item := .TLSAuth.Headers }}
	http-request set-header {{ $item.Header }} {{ $item.Value }} if { ssl_fc_has_crt }
	{{ end }}
	{{ end }}

	{{ range $rule := .FrontendRules }}
	{{ $rule }}
	{{ else }}
	option httplog
	option forwardfor
	{{ end }}

	{{ if .ProxyBodySize }}
	http-request deny deny_status 400 if { req.body_size gt {{ .ProxyBodySize }} }
	{{ end }}

	{{ if .CORSConfig.CORSEnabled }}
	http-response set-header Access-Control-Allow-Origin {{ .CORSConfig.CORSAllowedOrigin }}
	http-response set-header Access-Control-Allow-Methods {{ .CORSConfig.CORSAllowedMethods }}
	http-response set-header Access-Control-Allow-Credentials {{ .CORSConfig.CORSAllowCredentials }}
	http-response set-header Access-Control-Allow-Headers {{ .CORSConfig.CORSAllowedHeaders }}
	{{ end }}

	acl is_proxy_https hdr(X-Forwarded-Proto) https
	acl is_proxy_https ssl_fc
	http-request set-var(req.scheme) str(https) if is_proxy_https
	http-request set-var(req.scheme) str(http) if ! is_proxy_https

	{{ range $host := .Hosts }}
	{{ with $conditions := (host_acls $host.Host $.Port $.NodePort $.UseNodePort ) }}
	{{ range $cond := $conditions }}
	{{ if $cond }}acl acl_{{ $host.Host | acl_name }} {{ $cond }}{{ end }}
	{{ end }}
	{{ end }}

	{{ if $host.ExternalAuth }}
	{{ range $path := $host.ExternalAuth.Paths }}
	acl acl_{{ $host.Host | acl_name }}_oauth_paths path_beg {{ $path }}
	{{ end }}
	http-request lua.auth-request {{ $host.ExternalAuth.AuthBackend }} {{ $host.ExternalAuth.AuthPath }} if acl_{{ $host.Host | acl_name }} acl_{{ $host.Host | acl_name }}_oauth_paths
	http-request redirect location {{ $host.ExternalAuth.SigninPath }}?rd=%[var(req.scheme)]://%[hdr(host)]%[path] if acl_{{ $host.Host | acl_name }} acl_{{ $host.Host | acl_name }}_oauth_paths ! { var(txn.auth_response_successful) -m bool }
	{{ end }}

	{{ range $path := $host.Paths }}
	{{ if $path.Path }}acl acl_{{ $host.Host | acl_name }}:{{ $path.Path | acl_name }} path_beg {{ $path.Path }}{{ end }}
	{{ if $path.SSLRedirect }}
	http-request set-var(req.redirect_to_ssl) req.hdr(host) if ! is_proxy_https {{ if $host.Host }}acl_{{ $host.Host | acl_name }}{{ end }}{{ if $path.Path }} acl_{{ $host.Host | acl_name }}:{{ $path.Path | acl_name }}{{ end }}
	{{ if $.UseNodePort }}
	http-request replace-header Host ^(.*?):{{ $.NodePort }}$ \1:{{ $.NodePortFor443 }} if { var(req.redirect_to_ssl) -m found }
	{{ else }}
	http-request replace-header Host ^(.*?):80+$ \1:443 if { var(req.redirect_to_ssl) -m found }
	{{ end }}
	redirect scheme https code 308 if { var(req.redirect_to_ssl) -m found }
	{{ end }}
	{{ if $path.Backend }}
	use_backend {{ $path.Backend.Name }} {{ if or $host.Host $path.Path }}if {{ end }}{{ if $host.Host }}acl_{{ $host.Host | acl_name }}{{ end }}{{ if $path.Path }} acl_{{ $host.Host | acl_name }}:{{ $path.Path | acl_name }}{{ end }}
	{{ end }}
	{{ end }}
	{{ end }}
	{{ if .DefaultBackend }}
	default_backend {{ .DefaultBackend.Name }}
	{{ end }}
