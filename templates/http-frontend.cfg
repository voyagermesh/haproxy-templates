frontend {{ .FrontendName }}
	{{ if .OffloadSSL }}
	bind {{ .Address }}:{{ .Port }} {{ if .AcceptProxy }}accept-proxy{{ end }} ssl no-sslv3 no-tlsv10 no-tls-tickets crt /etc/ssl/private/haproxy/tls/ {{ if .TLSAuth }} ca-file /etc/ssl/private/haproxy/ca/{{ .TLSAuth.CAFile }} {{ if .TLSAuth.CRLFile }} crl-file /etc/ssl/private/haproxy/ca/{{ .TLSAuth.CRLFile }}{{ end }} verify {{ .TLSAuth.VerifyClient }} {{ if .TLSAuth.ErrorPage }}crt-ignore-err all {{end}}{{ end }} alpn http/1.1
	# Mark all cookies as secure
	rsprep ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure
	{{ if .EnableHSTS }}
	# Add the HSTS header with a 6 month default max-age
	http-response set-header Strict-Transport-Security max-age={{ .HSTSMaxAge }}{{ if .HSTSPreload }};\ preload{{ end }}{{ if .HSTSIncludeSubDomains }};\ includeSubDomains{{ end }}
	{{ end }}
	{{ else }}
	bind {{ .Address }}:{{ .Port }} {{ if .AcceptProxy }}accept-proxy{{ end }}
	{{ end }}

	mode http

	{{ if .Limit }}
	{{ if .Limit.Connection }}
	stick-table type ip size 100k expire 2m store conn_cur
	acl __mark_as_overload_conn__ sc1_conn_cur gt {{ .Limit.Connection }}
	tcp-request content track-sc1 src
	http-request deny if __mark_as_overload_conn__
	{{ end }}
	{{ if .Limit.Rate }}
	tcp-request inspect-delay 5s
	stick-table type ip size 1m expire 5m store conn_rate({{ .Limit.TimeSecond }}s)
	acl __mark_as_overload__ sc1_conn_rate gt {{ .Limit.Rate }}
	tcp-request content track-sc1 src
	http-request deny if __mark_as_overload__
	{{ end }}
	{{ end }}

	{{ if .WhitelistSourceRange }}
	# Add whitelisted ips
	acl network_allowed src {{ .WhitelistSourceRange }}
	block if restricted_page !network_allowed
	{{ end }}

	{{ if .BasicAuth }}
	{{ range $name := .BasicAuth.UserLists }}
	acl __auth_ok__  http_auth({{ $name }})
	{{ end }}
	http-request auth {{ if not $.BasicAuth.Realm }}realm "{{ $.BasicAuth.Realm }}" {{ end }}if !__auth_ok__
	{{ end }}

	{{ if .TLSAuth }}
	{{ if .TLSAuth.ErrorPage }}
	redirect location {{ .TLSAuth.ErrorPage }} unless { ssl_c_verify 0 } {{ if .TLSAuth.ErrorPath }}! { path {{ .TLSAuth.ErrorPath }} } {{ end }}
	{{ end }}
	{{ range $name, $value := .TLSAuth.Headers }}
	http-request set-header {{ $name }} {{ $value }} if { ssl_fc_has_crt }
	{{ end }}
	{{ end }}

	{{ range $rule := .FrontendRules }}
	{{ $rule }}
	{{ else }}
	option httplog
	option forwardfor
	{{ end }}

	{{ if .ProxyBodySize }}
	http-request deny deny_status 400 if { req.body_size gt {{ .ProxyBodySize }} }
	{{ end }}

	{{ if .EnableCORS }}
	capture request header origin len 128
	http-response set-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if { capture.req.hdr(0) -m found }
	http-response set-header Access-Control-Allow-Methods GET,\ HEAD,\ OPTIONS,\ POST,\ PUT  if { capture.req.hdr(0) -m found }
	http-response set-header Access-Control-Allow-Credentials true  if { capture.req.hdr(0) -m found }
	http-response set-header Access-Control-Allow-Headers Origin,\ Accept,\ X-Requested-With,\ Content-Type,\ Access-Control-Request-Method,\ Access-Control-Request-Headers,\ Authorization  if { capture.req.hdr(0) -m found }
	{{ end }}

	acl is_proxy_https hdr(X-Forwarded-Proto) https

	{{ range $host := .Hosts }}
	{{ if  and (or (eq $.Port 80) (eq $.Port 443)) ( or $.ForceMatchServicePort (not $.NodePort)) }}
	{{ if $host.Host }}acl host_acl_{{ $host.Host | acl_name }} {{ $host.Host | host_name }}{{ end }}
	{{ end }}
	{{ if $host.Host }}acl host_acl_{{ $host.Host | acl_name }} {{ $host.Host | host_name }}{{ if and (not $.ForceMatchServicePort) $.NodePort }}:{{ $.NodePort }}{{ else }}:{{ $.Port }}{{ end }}{{ end }}
	{{ range $path := $host.Paths }}
	{{ if $path.Path }}acl url_acl_{{ $host.Host | acl_name }}_{{ $path.Path | acl_name }} path_beg {{ $path.Path }}{{ end }}
	{{ if $path.SSLRedirect }}
	redirect scheme https code 301 if ! is_proxy_https {{ if $host.Host }}host_acl_{{ $host.Host | acl_name }}{{ end }}{{ if $path.Path }} url_acl_{{ $host.Host | acl_name }}_{{ $path.Path | acl_name }}{{ end }}
	{{ end }}
	{{ if $path.Backend }}
	use_backend {{ $path.Backend.Name }} {{ if or $host.Host $path.Path }}if {{ end }}{{ if $host.Host }}host_acl_{{ $host.Host | acl_name }}{{ end }}{{ if $path.Path }} url_acl_{{ $host.Host | acl_name }}_{{ $path.Path | acl_name }}{{ end }}
	{{ end }}
	{{ end }}
	{{ end }}
	{{ if .DefaultBackend }}
	default_backend {{ .DefaultBackend.Name }}
	{{ end }}
