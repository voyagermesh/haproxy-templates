frontend http-frontend
	bind *:80 {{ if .AcceptProxy }}accept-proxy{{ end }}

	# Limit Connections
	{{- if .Limit }}
	{{- if .Limit.Connection }}
	stick-table type ip size 100k expire 2m store conn_cur
	acl __mark_as_overload_conn__ sc1_conn_cur gt {{ .Limit.Connection }}
	tcp-request content track-sc1 src
	http-request deny if __mark_as_overload_conn__
	{{ end }}
	{{- if .Limit.Rate }}
	tcp-request inspect-delay 5s
	stick-table type ip size 1m expire 5m store conn_rate({{ .Limit.TimeSecond }}s)
	acl __mark_as_overload__ sc1_conn_rate gt {{ .Limit.Rate }}
	tcp-request content track-sc1 src
	http-request deny if __mark_as_overload__
	{{ end -}}
	{{ end }}

	mode http
	option httplog
	option forwardfor

	{{- if .SSLRedirect }}
	acl is_proxy_https hdr(X-Forwarded-Proto) https
	redirect scheme https code 301 if ! is_proxy_https
	{{ end -}}

	{{- if .Auth }}
	{{- range $name, $users := .Auth.Users }}
	acl __auth_ok__  http_auth({{ $name -}})
	{{ end -}}
	http-request auth {{ if not $.Auth.Realm }}realm "{{ $.Auth.Realm }}" {{ end }}if !__auth_ok__
	{{ end }}

	{{- if .ProxyBodySize -}}
	http-request deny deny_status 400 if { req.body_size gt {{ .ProxyBodySize }} }
	{{ end }}

	{{- if .EnableCORS -}}
	capture request header origin len 128
	http-response add-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if { capture.req.hdr(0) -m found }
	rspadd Access-Control-Allow-Methods:\ GET,\ HEAD,\ OPTIONS,\ POST,\ PUT  if { capture.req.hdr(0) -m found }
	rspadd Access-Control-Allow-Credentials:\ true  if { capture.req.hdr(0) -m found }
	rspadd Access-Control-Allow-Headers:\ Origin,\ Accept,\ X-Requested-With,\ Content-Type,\ Access-Control-Request-Method,\ Access-Control-Request-Headers,\ Authorization  if { capture.req.hdr(0) -m found }
	{{ end }}

	default_backend {{ .DefaultBackend.Name }}

